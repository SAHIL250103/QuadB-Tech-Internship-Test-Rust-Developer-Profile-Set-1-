use std::io;

fn merge_sorted_arrays(arr1: &[i32], arr2: &[i32]) -> Vec<i32> {
    let mut merged_array = Vec::with_capacity(arr1.len() + arr2.len());
    let (mut i, mut j) = (0, 0);

    while i < arr1.len() && j < arr2.len() {
        if arr1[i] < arr2[j] {
            merged_array.push(arr1[i]);
            i += 1;
        } else {
            merged_array.push(arr2[j]);
            j += 1;
        }
    }

    // Append remaining elements from arr1
    while i < arr1.len() {
        merged_array.push(arr1[i]);
        i += 1;
    }

    // Append remaining elements from arr2
    while j < arr2.len() {
        merged_array.push(arr2[j]);
        j += 1;
    }

    merged_array
}

fn read_array() -> Vec<i32> {
    println!("Enter elements of the array separated by spaces:");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");

    input.trim().split_whitespace()
        .map(|num| num.parse().expect("Invalid number"))
        .collect()
}

fn main() {
    println!("Enter the first sorted array:");
    let arr1 = read_array();

    println!("Enter the second sorted array:");
    let arr2 = read_array();

    let merged_array = merge_sorted_arrays(&arr1, &arr2);
    println!("Merged array: {:?}", merged_array);
}
